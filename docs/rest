What is REST
    
    REST stands for Representational State Transfer
    Is an architectural style for network communication between applications, which relies on a stateless protocol 

Why REST?

    REST uses standard HTTP
    REST permits many different data formats whereas SOAP only permits XML.
    REST reads can be cached, SOAP based reads cannot be cached.

HTTP Verbs Represent Actions

    In RESTful APIs, we use the HTTP verbs as actions, and the endpoints are the resources acted upon. We’ll be using the HTTP verbs for their semantic meaning:

    GET:        Retrieve resources
    POST:       Create resources
    PUT:        Update resources
    DELETE:     Delete resources


Why SOAP?
        SOAP (Simple Object Access Protocol) is a messaging protocol that allows programs that run on disparate operating systems (such as Windows and Linux) to communicate using Hypertext Transfer Protocol (HTTP) and its Extensible Markup Language (XML).
        SOAP Building Blocks
        A SOAP message is an ordinary XML document containing the following elements:
        An Envelope element that identifies the XML document as a SOAP message
        A Header element that contains header information
        A Body element that contains call and response information
        A Fault element containing errors and status information


        Syntax Rules
        A SOAP message MUST be encoded using XML
        A SOAP message MUST use the SOAP Envelope namespace
        A SOAP message MUST use the SOAP Encoding namespace
        A SOAP message must NOT contain a DTD reference
        A SOAP message must NOT contain XML Processing Instructions


        Skeleton SOAP Message
        <?xml version="1.0"?>
            <soap:Envelope
                xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
                soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">
                <soap:Header>...</soap:Header>
                <soap:Body>
                    ...
                <soap:Fault>
                ...
            </soap:Fault>
            </soap:Body>
        </soap:Envelope>


    Why SOAP?

        Here are a few reasons you may want to use SOAP.
        
            WS-Security ()
            While SOAP supports SSL (just like REST) it also supports WS-Security which adds some enterprise security features.
            Supports identity through intermediaries, not just point to point (SSL). 
            It also provides a standard implementation of data integrity and data privacy.
            Calling it “Enterprise” isn’t to say it’s more secure, 
            it simply supports some security tools that typical internet services have no need for, in fact they are really only needed in a few “enterprise” scenarios.


            WS-AtomicTransaction
                Need ACID Transactions over a service, you’re going to need SOAP. While REST supports transactions, it isn’t as comprehensive and isn’t ACID compliant. Fortunately ACID transactions almost never make sense over the internet. REST is limited by HTTP itself which can’t provide two-phase commit across distributed transactional resources, but SOAP can. Internet apps generally don’t need this level of transactional reliability, enterprise apps sometimes do.
            
            WS-ReliableMessaging
                Rest doesn’t have a standard messaging system and expects clients to deal with communication failures by retrying. SOAP has successful/retry logic built in and provides end-to-end reliability even through SOAP intermediaries


