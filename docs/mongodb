What is mongodb?

    MongoDB is an open-source document database
    
    Leading NoSQL database.

    MongoDB is written in C++

    port no used by mongo is 27017 

    

Install MongoDB on Ubuntu 16.04

    Step 1 - Importing the Public Key

            GPG keys of the software distributor are required by the Ubuntu package manager apt (Advanced Package Tool) 
            to ensure package consistency and authenticity. Run this command to import MongoDB keys to your server.

                sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927


    Step 2 - Create source list file MongoDB

            Create a MongoDB list file in /etc/apt/sources.list.d/ with this command:

            echo "deb http://repo.mongodb.org/apt/ubuntu "$(lsb_release -sc)"/mongodb-org/3.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list


    Step 3 - Update the repository

            update the repository with the apt command:

                sudo apt-get update

    Step 4 - Install MongoDB

            Now you can install MongoDB by typing this command:

                sudo apt-get install -y mongodb-org

            We have to create a new mongodb systemd service file in the '/lib/systemd/system' directory.
            Go to that directory and create the new mongodb service file 'mongod.service' with vim.

                cd /lib/systemd/system/
                vim mongod.service

            Paste script below:

                [Unit]
                Description=High-performance, schema-free document-oriented database
                After=network.target
                Documentation=https://docs.mongodb.org/manual

                [Service]
                User=mongodb
                Group=mongodb
                ExecStart=/usr/bin/mongod --quiet --config /etc/mongod.conf

                [Install]
                WantedBy=multi-user.target

            Save the file and exit.

            Now update the systemd service with command below:

                    systemctl daemon-reload

            Start mongodb and add it as service to be started at boot time:

                    systemctl start mongod
                    systemctl enable mongod

            Now check that mongodb has been started on port 27017 with the netstat command.

                    netstat -plntu

            Configure MongoDB username and password

                    When the MongoDB packages are installed you can configure username and password for the database server:

                    Step 1 - Open mongo shell

                            Before you set up a username and password for MongoDB, you need to open the mongodb shell on 
                            your server. You can login by typing:

                                mongo

                            If you get error Failed global initialization: BadValue Invalid or no user locale set. 
                            Please ensure LANG and/or LC_* environment variables are set correctly, 

                    try the command:

                            export LC_ALL=C
                            mongo
                
                    Step 2 - Switch to the database admin

                            Once you`re in the MongoDB shell, switch to the database named admin:

                            use admin
                    Step 3 - Create the root user

                            Create the root user with this command :

                                db.createUser({user:"admin", pwd:"admin123", roles:[{role:"root", db:"admin"}]})

                            Desc: 
                                Create user admin with password admin123 and have the permission/role as root and the database is admin.

                            Create a admin user in MongoDB

                                Now type exit to exit from MongoDB shell.        


                    Step 4 - Enable mongodb authentication

                                Edit the mongodb service file '/lib/systemd/system/mongod.service' with your editor.

                                    vim /lib/systemd/system/mongod.service

                                On the 'ExecStart' line 9, add the new option '--auth'.

                                    ExecStart=/usr/bin/mongod --quiet --auth --config /etc/mongod.conf

                            Save and exit.

                            Reload the systemd service:

                                systemd daemon-reload

                    Step 5 - Restart MongoDB and try to connect

                            Now restart MongoDB and connect with the user created.

                                    sudo service mongod restart

                            and connect to the mongodb shell with this command:

                                    mongo -u admin -p admin123 --authenticationDatabase admin

                            and you will see the output like this:

                                    Test MongoDB Authentication.

PHP - Mongodb configure

    $ phpize
    $ ./configure
    $ make all
    $ sudo make install                

    sudo pecl install mongo

    Add the following line to your php.ini file:

        extension=mongo.so
================================================================================================================

            RDBMS               MongoDB

        Database                    Database

        Table                       Collection

        Tuple/Row                   Document

        column                      Field

        Table Join                  Embedded Documents

        Primary Key                 Primary Key (Default key _id provided by mongodb itself)


        Note : 
                _id is 12 bytes hexadecimal number unique for every document in a collection. 
                12 bytes are divided as follows:

                    First 4 bytes for the current timestamp, 
                    Next 3 bytes for machine id, 
                    Next 2 bytes for process id of MongoDB server and 
                    Remaining 3 bytes are simple incremental VALUE.

                Database Server and Client

        Mysqld/Oracle           mongod
        mysql/sqlplus           mongo

================================================================================================================

    Command in mongodb

        Start MongoDB

            sudo service mongodb start

        Stop MongoDB

            sudo service mongodb stop

        Restart MongoDB

            sudo service mongodb restart

        To use MongoDB run the following command.

            mongo

        MongoDB Statistics

            db.stats();
--------------------------------------------------------------------------------------
        To create database 
        
        use <db_name> e.g. use mydb
--------------------------------------------------------------------------------------
        To check current database name  use following command
        db
--------------------------------------------------------------------------------------
        To display all database

            show dbs    
    
        Note : To display database, you need to insert at least one document into it.
--------------------------------------------------------------------------------------

        To get list of commands 
        
            db.help()

--------------------------------------------------------------------------------------
        In mongodb default database is test. If you didn't create any database then collections will be stored in test database.
--------------------------------------------------------------------------------------
10) MongoDB Create Collection
	
	MongoDB db.createCollection(name, options) is used to create collection. 

	Syntax: Basic syntax of createCollection() command is as follows 

	db.createCollection(name, options)

        ==============================================================================
	Parameter		Type		Description
        ==============================================================================
	Name			String		Name of the collection to be created
        ==============================================================================
	Options			Document	(Optional) Specify options about 
						memory size and indexing
--------------------------------------------------------------------------------------
    11) Basic syntax of createCollection() method without options is as follows

	db.createCollection("mycollection")

--------------------------------------------------------------------------------------
    12) You can check the created collection by using the command show collections

	show collections

        Note : In mongodb you don't need to create collection. MongoDB creates collection automatically, 
               when you insert some document.

--------------------------------------------------------------------------------------
    13) Drop collections
	MongoDB's db.collection.drop() is used to drop a collection from the database.
	db.<COLLECTION_NAME>.drop()
	e.g. db.mycollection.drop()

--------------------------------------------------------------------------------------
    14) Show data inside collection  

    a) find() method will display all the documents in a non structured way

    Basic syntax of find() method is as follows
        db.<COLLECTION_NAME>.find()
        e.g. db.my_col.find()

        a.1) The pretty() Method
            To display the results in a formatted way, you can use pretty() method.
            db.<COLLECTION_NAME>.find().pretty()
            e.g. db.my_col.find().pretty();
            

--------------------------------------------------------------------------------------
15) _id is 12 bytes hexadecimal number unique for every document in a collection. 12 bytes are divided as follows:
--------------------------------------------------------------------------------------
16) RDBMS Where Clause Equivalents in MongoDB

    ==========================================================================================================================================
        Operation      Syntax                 Example                                               RDBMS Equivalent
    ==========================================================================================================================================
    Equality           {<key>:<value>}        db.mycol.find({"by":"tutorials point"}).pretty()       where by ='tutorials point'
    ------------------------------------------------------------------------------------------------------------------------------------------
    Less Than          {<key>:{$lt:<value>}}  db.mycol.find({"likes":{$lt:50}}).pretty()             where likes < 50
    ------------------------------------------------------------------------------------------------------------------------------------------
    Less ThanEquals    {<key>:{$lte:<value>}}  db.mycol.find({"likes":{$lte:50}}).pretty()           where likes <= 50
    ------------------------------------------------------------------------------------------------------------------------------------------
    Greater Than       {<key>:{$gt:<value>}}   db.mycol.find({"likes":{$gt:50}}).pretty()            where likes > 50
    ------------------------------------------------------------------------------------------------------------------------------------------
    Less Than Equals    {<key>:{$gte:<value>}}  db.mycol.find({"likes":{$gte:50}}).pretty()          where likes >= 50
    ------------------------------------------------------------------------------------------------------------------------------------------
    Not Equals          {<key>:{$ne:<value>}}   db.mycol.find({"likes":{$ne:50}}).pretty()           where likes !=50
    ------------------------------------------------------------------------------------------------------------------------------------------
    AND in MongoDB

    db.mycol.find({key1:value1, key2:value2}).pretty()

        e.g. db.mycol.find({"by":"tutorials point","title": "MongoDB Overview"}).pretty()
    
    For the above given example equivalent where clause will be ' where by='tutorials point' AND title='MongoDB Overview' '.

    ------------------------------------------------------------------------------------------------------------------------------------------

    OR in MongoDB

        db.mycol.find({$or: [{key1: value1}, {key2:value2}]}).pretty();

        e.g. db.mycol.find({$or:[{"by":"tutorials point"},{"title": "MongoDB Overview"}]}).pretty()

    ------------------------------------------------------------------------------------------------------------------------------------------    

    AND in MongoDB    

        db.mycol.find({
                        $and: [
                                {key1: value1}, {key2:value2}
                              ]
                      }
                    ).pretty()

    ------------------------------------------------------------------------------------------------------------------------------------------
    
    Using AND and OR together

    db.mycol.find("likes": {$gt:10}, $or: [{"by": "tutorials point"}, {"title": "MongoDB Overview"}] }).pretty()

    e.g.        
    ==========================================================================================================================================================================================================
    
--------------------------------------------------------------------------------------
    17) MongoDB's update() and save() methods are used to update document into a collection.

    The update() method update values in the existing document while the save() method replaces the existing document with the document
    passed in save() method.

    A) update() : 

    Syntax: Basic syntax of update() method is as follows
            db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)    
            e.g. db.mycol.update({'title':'MongoDB Overview'},{$set:{'title':'New MongoDB Tutorial'}})

    Note : By default mongodb will update only single document, to update multiple you need to set a parameter 'multi' to true.
    
    db.mycol.update({'title':'MongoDB Overview'},{$set:{'title':'New MongoDB Tutorial'}},{multi:true})
    
    B) Save() Method

    Syntax : Basic syntax of mongodb save() method is shown below
            db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})
            e.g. db.mycol.save({"_id" : ObjectId(5983548781331adf45ec7), "title":"Tutorials Point New Topic", "by":"TutorialsPoint"})    

--------------------------------------------------------------------------------------
    18) Delete Document
        remove() method is used to remove document from the collection. remove() method accepts two parameters. 
        One is deletion criteria and second is just One flag.

    1. deletion criteria : (Optional) deletion criteria according to documents will be removed.
    2. justOne : (Optional) if set to true or 1, then remove only one document.
    
    
    A) Basic syntax of remove() method is as follows
    db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)
        e.g. db.mycol.remove({'title':'MongoDB Overview'})

    B) Remove only one
        If there are multiple records and you want to delete only first record, then set justOne parameter in remove() method
        db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)
        e.g. db.mycol.remove({'title':'MongoDB Overview'},1)
        
--------------------------------------------------------------------------------------
    19) Truncate command
        db.mycol.remove()
        
--------------------------------------------------------------------------------------
    20 ) MongoDB Projection
        In mongodb projection meaning is selecting only necessary data rather than selecting whole of the data of a
        document. If a document has 5 fields and you need to show only 3, then select only 3 fields from them

        find() accepts second optional parameter that is list of fields that you want to retrieve. 

        In MongoDB when you execute find() method, then it displays all fields of a document.
        
        To limit this you need to set list of fields with value 1 or 0. 
            1 is used to show the filed while 0 is used to hide the field.

        Syntax: Basic syntax of find() method with projection is as follows    
                db.COLLECTION_NAME.find({},{KEY:1})
                
        Following example will display the title of the document while quering the document.
        db.mycol.find({},{"title":1,_id:0})
--------------------------------------------------------------------------------------
    21) MongoDB Limit Records

    To limit the records in MongoDB, you need to use limit() method. 
    limit() method accepts one number type argument,which is number of documents that you want to displayed.

    Syntax: Basic syntax of limit() method is as follows
        db.COLLECTION_NAME.find().limit(NUMBER)
        e.g. db.mycol.find({},{"title":1,_id:0}).limit(2) 
            db.mycol.find().limit(2)

    Skip() Method [Limit 1,1]

    Apart from limit() method there is one more method skip() which also accepts number type argument and used to skip number of documents.
        Syntax: Basic syntax of skip() method is as follows
                db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)

    Example:Following example will only display only second document.
            db.mycol.find({},{"title":1,_id:0}).limit(1).skip(1)            
--------------------------------------------------------------------------------------
    22) MongoDB Sorting Documents
    sort() Method 
        To sort documents in MongoDB, you need to use sort() method. sort() method accepts a document containing list of
        fields along with their sorting order. 
    
        To specify sorting order 1 and -1 are used. 1 is used for ascending order while -1 is used for descending order.
        
        e.g. db.mycol.find({},{"title":1,_id:0}).sort({"title":-1})
--------------------------------------------------------------------------------------
    23) MongoDB Indexing

    ensureIndex() Method
        To create an index you need to use ensureIndex() method of mongodb.
        Syntax: Basic syntax of ensureIndex() method is as follows()
                db.COLLECTION_NAME.ensureIndex({KEY:1})

        Here key is the name of filed on which you want to create index and 1 is for ascending order. 
        To create index in descending order you need to use -1.        
        e.g. db.mycol.ensureIndex({"title":1})
        
        In ensureIndex() method you can pass multiple fields, to create index on multiple fields.
        e.g. db.mycol.ensureIndex({"title":1,"description":-1})
        
--------------------------------------------------------------------------------------
    24) MongoDB Aggregation (count(*) , Group by )

        In sql count(*) and with group by is an equivalent of mongodb aggregation.

        The aggregate() Method : For the aggregation in mongodb you should use aggregate() method.
        Syntax: Basic syntax of aggregate() method is as follows
                db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)

        db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : 1}}}])

        Sql equivalent query for the above use case will be select by_user, count(*) from mycol group by by_user

        will display a list that how many tutorials are written by each user


        list available aggregation expressions
    ==========================================================================================================================================
        Expression    Description                                                           Example
    ==========================================================================================================================================

        $sum        Sums up the defined value from all documents in the collection.       db.mycol.aggregate([{$group : {_id: "$by_user", num_tutorial : {$sum :"$likes"}}}])
        ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        $avg        Calculates the average of all given values from all documents in      db.mycol.aggregate([{$group : {_id: "$by_user", num_tutorial : {$avg :"$likes"}}}])
                    the collection.
        ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        $min        Gets the minimum of the corresponding values from all documents in    db.mycol.aggregate([{$group : {_id: "$by_user", num_tutorial : {$min :"$likes"}}}])
                    the collection.
        ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        $max        Gets the maximum of the corresponding values from all documents in    db.mycol.aggregate([{$group : {_id: "$by_user", num_tutorial : {$max :"$likes"}}}])
                    the collection.
        ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        $push       Inserts the value to an array in the resulting document.              db.mycol.aggregate([{$group : {_id: "$by_user", url : {$push: "$url"}}}])
        ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        $addToSet   Inserts the value to an array in the resulting document but does      db.mycol.aggregate([{$group : {_id: "$by_user", url : {$addToSet :"$url"}}}])
                    not create duplicates.
        ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        $first      Gets the first document from the source documents according to the    db.mycol.aggregate([{$group : {_id: "$by_user", first_url : {$first :"$url"}}}]) 
                    grouping. Typically this makes only sense together with some 
                    previously applied \93$sort\94-stage.
        ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        $last       Gets the last document from the source documents according to the     db.mycol.aggregate([{$group : {_id: "$by_user", last_url : {$last :"$url"}}}])
                    grouping.Typically this makes only sense together with some previously 
                    applied \93$sort\94-stage.

==========================================================================================================================================
--------------------------------------------------------------------------------------
    25) MongoDB Create Backup
    
        To create backup of database in mongodb you should use mongodump command. This command will dump all data
        of your server into dump directory. 
        
        There are many options available by which you can limit the amount of data or create backup of your remote server.
        
        mongodump command will backup only specified database at specified path
    
    ===============================================================================================================================================================    
        Syntax                                              Description                                          Example
    ===============================================================================================================================================================
        mongodump --host HOST_NAME \96port PORT_NUMBER        This commmand will backup all databases of           mongodump --host tutorialspoint.com \96port 27017 
                                                            specified mongod instance.
        ------------------------------------------------------------------------------------------------------------------------------------------------------------
        mongodump --dbpath DB_PATH --out BACKUP_DIRECTORY                                                        mongodump --dbpath /data/db/ --out/data/backup/
        ------------------------------------------------------------------------------------------------------------------------------------------------------------        
        mongodump --collection COLLECTION --db DB_NAME      This command will backup only specified collection   mongodump --collection mycol --db test
                                                            of specified database.
        ------------------------------------------------------------------------------------------------------------------------------------------------------------
            
            


        

