1) Install composer

2) check composer installed or not using following command

    composer

3)  Create a project 

    composer create-project laravel/laravel <project_name>

4)  php artisan serve
    php artisan down
    Check laravel version
        php artisan --version

5) Give permission to storage,boostrap/cache directories

6) Locale, time zone changes in config/app.php

7) Environment configuration changes in .env file

8) DB config file

    config/database.php

9) Routing Parameters

    9.1) Required Parameters

        Route::get('ID/{id}',function($id){
            echo 'ID: '.$id;
        });


    9.2) Optional Parameters

        Route::get('/user/{name?}',function($name = 'Virat'){
           echo "Name: ".$name;
        });

   Named routes

	Named routes allow the convenient for generation of URLs or redirects for specific routes. 
	You may specify a name for a route by chaining the name method onto the route definition:

		Route::get('user/profile', function () {
	    		//
		})->name('profile');

	You may also specify route names for controller actions:

		Route::get('user/profile', 'UserController@showProfile')->name('profile');

	Generating URLs To Named Routes

		Once you have assigned a name to a given route, you may use the route's name when generating URLs or redirects via the global route function:

		// Generating URLs...
		$url = route('profile');

		// Generating Redirects...
		return redirect()->route('profile');

		If the named route defines parameters, you may pass the parameters as the second argument to the  route function. 
		The given parameters will automatically be inserted into the URL in their correct positions:

			Route::get('user/{id}/profile', function ($id) {
			    //
			})->name('profile');

			$url = route('profile', ['id' => 1]);
-----------------------------------------------------------------------------------------------------------------------------

	Accessing The Current Route

		You may use the current, currentRouteName, and currentRouteAction methods on the Route facade to access information about the 
		route handling the incoming request:

			$route = Route::current();
		
			$name = Route::currentRouteName();

			$action = Route::currentRouteAction();

-----------------------------------------------------------------------------------------------------------------------------
10) Middleware

        Middleware acts as a middle man between request and response.

        10.1) Global Middleware
        
                Global Middleware will run on every HTTP request of the application

        10.2) Route Middleware
        
                Route Middleware will be assigned to a specific route.

IMP :

	CSRF token can be defined as follows

		    {{ csrf_field() }}

	e.g.
		<form method="POST" action="/profile">
		    {{ csrf_field() }}
		    ...
		</form>

 

==========================================================================================

URLs :

    CRUD application

    http://georgehk.blogspot.in/2015/04/crud-operations-in-laravel-5-with-mysql.html

        
    
    

    


    

