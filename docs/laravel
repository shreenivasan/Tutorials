1) Install composer

2) check composer installed or not using following command

    composer

3)  Create a project 

    composer create-project laravel/laravel <project_name>

4)  php artisan serve

    php artisan down

    Check laravel version
        php artisan --version

5) Give permission to storage,boostrap/cache directories

6) Locale, time zone changes in config/app.php

7) Environment configuration changes in .env file

8) DB config file

    config/database.php

9) Routing Parameters

    9.1) Required Parameters

        Route::get('ID/{id}',function($id){
            echo 'ID: '.$id;
        });


    9.2) Optional Parameters

        Route::get('/user/{name?}',function($name = 'Virat'){
           echo "Name: ".$name;
        });

   Named routes

	Named routes allow the convenient for generation of URLs or redirects for specific routes. 
	You may specify a name for a route by chaining the name method onto the route definition:

		Route::get('user/profile', function () {
	    		//
		})->name('profile');

	You may also specify route names for controller actions:

		Route::get('user/profile', 'UserController@showProfile')->name('profile');

	Generating URLs To Named Routes

		Once you have assigned a name to a given route, you may use the route's name when generating URLs or redirects via the global route function:

		// Generating URLs...
		$url = route('profile');

		// Generating Redirects...
		return redirect()->route('profile');

		If the named route defines parameters, you may pass the parameters as the second argument to the  route function. 
		The given parameters will automatically be inserted into the URL in their correct positions:

			Route::get('user/{id}/profile', function ($id) {
			    //
			})->name('profile');

			$url = route('profile', ['id' => 1]);
-----------------------------------------------------------------------------------------------------------------------------

	Accessing The Current Route

		You may use the current, currentRouteName, and currentRouteAction methods on the Route facade to access information about the 
		route handling the incoming request:

			$route = Route::current();
		
			$name = Route::currentRouteName();

			$action = Route::currentRouteAction();

-----------------------------------------------------------------------------------------------------------------------------
10) Middleware

        Middleware acts as a middle man between request and response.

        10.1) Global Middleware
        
                Global Middleware will run on every HTTP request of the application

        10.2) Route Middleware
        
                Route Middleware will be assigned to a specific route.

IMP :

	CSRF token can be defined as follows

		    {{ csrf_field() }}

	e.g.
		<form method="POST" action="/profile">
		    {{ csrf_field() }}
		    ...
		</form>

 

==========================================================================================

    Determining The Current Environment
    
        The current application environment is determined via the APP_ENV variable from your .env file. 
        $environment = App::environment();

        i.e. local , staging , production

==========================================================================================

    Accessing Configuration Values

        $value = config('app.timezone');

URLs :

    CRUD application

    http://georgehk.blogspot.in/2015/04/crud-operations-in-laravel-5-with-mysql.html

==========================================================================================

    Voyager installation & configuration

        1) composer require tcg/voyager
        2) set db details in .env file & config/database.php
        3) php artisan voyager:install
        
            Create user
        4) php artisan voyager:admin admin@admin.com --create

===========================================================================================        
    
    Route Caching

    php artisan route:cache

    php artisan route:clear

===========================================================================================

    Create Resource

    php artisan make:controller PhotoController --resource

===========================================================================================

    Retrieving All Input Data

        $input = $request->all();

    Retrieving An Input Value

        $name = $request->input('name');

        $name = $request->input('name', '<default_value>');

        $name = $request->input('products.0.name');

        $names = $request->input('products.*.name');

        $input = $request->input();

    Retrieving Input From The Query String

        $name = $request->query('name');

        $name = $request->query('name', '<default_value>');

        $query = $request->query();


    Retrieving JSON Input Values

        $name = $request->input('user.name');

    Retrieving A Portion Of The Input Data

        $input = $request->only(['username', 'password']);

        $input = $request->only('username', 'password');

        $input = $request->except(['credit_card']);

        $input = $request->except('credit_card');

    Determining If An Input Value Is Present

        if ($request->has('name')) {
            //
        }

        if ($request->has(['name', 'email'])) {
            //
        }
    
    // isset & !empty()

        if ($request->filled('name')) {
            //
        }

    Flashing Input To The Session

        $request->flash();

        $request->flashOnly(['username', 'email']);

        $request->flashExcept('password');
        
    Retrieving Old Input

        $username = $request->old('username');

        <input type="text" name="username" value="{{ old('username') }}">

    Retrieving Cookies From Requests

        $value = $request->cookie('name');
        $value = Cookie::get('name');

    Retrieving Uploaded Files

        $file = $request->file('photo');

        $file = $request->photo;
        
        if ($request->hasFile('photo')) {
            //
        }

        if ($request->file('photo')->isValid()) {
            //
        }
    
        $path = $request->photo->path();

        $extension = $request->photo->extension();
        
        $path = $request->photo->store('images');

        $path = $request->photo->store('images', 's3');

        $path = $request->photo->storeAs('images', 'filename.jpg');

        $path = $request->photo->storeAs('images', 'filename.jpg', 's3');


    ===========================================================================================


    Response

        Route::get('/', function () {
            return 'Hello World';
        });

        Route::get('/', function () {
            return [1, 2, 3];
        });
        
    Response Objects

        Route::get('home', function () {
            return response('Hello World', 200)
                   ->header('Content-Type', 'text/plain');
        });

    Attaching Headers To Responses

        return response($content)
            ->header('Content-Type', $type)
            ->header('X-Header-One', 'Header Value')
            ->header('X-Header-Two', 'Header Value');

        return response($content)
            ->withHeaders([
                'Content-Type' => $type,
                'X-Header-One' => 'Header Value',
                'X-Header-Two' => 'Header Value',
            ]);
    
    Attaching Cookies To Responses

        return response($content)
                ->header('Content-Type', $type)
                ->cookie($name, $value, $minutes, $path, $domain, $secure, $httpOnly)

    Redirects

        Route::get('dashboard', function () {
            return redirect('home/dashboard');
        });

    Redirecting To Named Routes

        return redirect()->route('login');

        return redirect()->route('profile', ['id' => 1]);

    JSON Responses

        return response()->json([
                                    'name' => 'Abigail',
                                    'state' => 'CA'
                                ]);

    File Downloads

        return response()->download($pathToFile);

        return response()->download($pathToFile, $name, $headers);

        return response()->download($pathToFile)->deleteFileAfterSend();

============================================================================================

    URL Generation

        Generating Basic URLs

            $post = App\Post::find(1);
            echo url("/posts/{$post->id}");

            // http://example.com/posts/1

        Accessing The Current URL

            // Get the current URL without the query string...
            echo url()->current();

            // Get the current URL including the query string...
            echo url()->full();

            // Get the full URL for the previous request...
            echo url()->previous();



            echo route('post.show', ['post' => 1]);
            // http://example.com/post/1




    
        
    



