HTTP Session

	Since HTTP driven applications are stateless, sessions provide a way to store information about the user across multiple requests. 

	he session configuration file is stored at config/session.php

	The session driver configuration option defines where session data will be stored for each request. Laravel ships with several great 
	
	drivers out of the box:

		file 			- sessions are stored in storage/framework/sessions.
		cookie 			- sessions are stored in secure, encrypted cookies.
		database 		- sessions are stored in a relational database.
		memcached / redis 	- sessions are stored in one of these fast, cache based stores.
		array 			- sessions are stored in a PHP array and will not be persisted.

	Driver Prerequisites

		Database

			When using the database session driver, you will need to create a table to contain the session items.
			Below is an example Schema declaration for the table:

			Schema::create('sessions', function ($table) {
			    $table->string('id')->unique();
			    $table->unsignedInteger('user_id')->nullable();
			    $table->string('ip_address', 45)->nullable();
			    $table->text('user_agent')->nullable();
			    $table->text('payload');
			    $table->integer('last_activity');
			});

			You may use the session:table Artisan command to generate this migration:

				php artisan session:table

				php artisan migrate

		Redis

			Before using Redis sessions with Laravel, you will need to install the predis/predis package (~1.0) via Composer.

			You may configure your Redis connections in the database configuration file. 

			In the  session configuration file, the connection option may be used to specify which Redis connection is used by the 
			session.


#) Retrieving Data

	There are two primary ways of working with session data in Laravel: 
	
		1) global session helper 
		
			Route::get('home', function () {
			    // Retrieve a piece of data from the session...
			    $value = session('key');

			    // Specifying a default value...
			    $value = session('key', 'default');

			    // Store a piece of data in the session...
			    session(['key' => 'value']);
			});


		2) Request			

		<?php
			namespace App\Http\Controllers;
			use Illuminate\Http\Request;
			use App\Http\Controllers\Controller;	
			class UserController extends Controller
			{
    				public function show(Request $request, $id)
    				{
    				    $value = $request->session()->get('key');
    				}
			}
		?>

		#) get() : with default value
	
			$value = $request->session()->get('key', 'default');

		#) all() : Retrieving All Session Data

			$data = $request->session()->all();


		#) has() : Determining If An Item Exists In The Session

			 The has method returns true if the value is present and is not null

				if ($request->session()->has('users')) {
				}

		#) exists() : To determine if a value is present in the session, even if its value is null
		
			if ($request->session()->exists('users')) {
			}

		#) Storing Data

			To store data in the session, you will typically use the put method or the session helper:

			// Via a request instance...
			$request->session()->put('key', 'value');

			// Via the global helper...
			session(['key' => 'value']);

		#) Pushing To Array Session Values

			The push method may be used to push a new value onto a session value that is an array.
			For example, if the user.teams key contains an array of team names, you may push a new value onto the array like so:

			$request->session()->push('user.teams', 'developers');

		#) Retrieving & Deleting An Item

			The pull method will retrieve and delete an item from the session in a single statement:

				$value = $request->session()->pull('key', 'default');

		#) Flash Data


			Sometimes you may wish to store items in the session only for the next request. 

			You may do so using the flash method. Data stored in the session using this method will only be available during the 
			subsequent HTTP request, and then will be deleted. 

			Flash data is primarily useful for short-lived status messages:

			$request->session()->flash('status', 'Task was successful!');

			If you need to keep your flash data around for several requests,
			you may use the reflash method, which will keep all of the flash data for an additional request. 

			If you only need to keep specific flash data, you may use the keep method:

			$request->session()->reflash();

			$request->session()->keep(['username', 'email']);

		#) Deleting Data

			The forget method will remove a piece of data from the session. 

			If you would like to remove all data from the session, you may use the flush method:

				$request->session()->forget('key');

				$request->session()->flush();

		
			
		




		
		
	


