#) Creating Views

	Views contain the HTML served by your application and separate your controller / application logic from your presentation logic.
	Views are stored in the resources/views directory. A simple view might look something like this:

	<!-- View stored in resources/views/greeting.blade.php -->

		<html>
		    <body>
	        	<h1>Hello, {{ $name }}</h1>
		    </body>
		</html>

	Since this view is stored at resources/views/greeting.blade.php, we may return it using the global  view helper like so:

		Route::get('/', function () {
		    return view('greeting', ['name' => 'James']);
		});

#) Views nested within sub-directories

	Views may also be nested within sub-directories of the resources/views directory.
	"Dot" notation may be used to reference nested views.

	For example, if your view is stored at  resources/views/admin/profile.blade.php, you may reference it like so:
	
		return view('admin.profile', $data);

#) Determining If A View Exists

	If you need to determine if a view exists, you may use the View facade. The exists method will return true if the view exists:

		use Illuminate\Support\Facades\View;
		if (View::exists('emails.customer')) {
		}

#) Passing Data To Views

	As you saw in the previous examples, you may pass an array of data to views:

		return view('greetings', ['name' => 'Victoria']);

	When passing information in this manner, the data should be an array with key / value pairs.
	
	Inside your view, you can then access each value using its corresponding key, such as  <?php echo $key; ?>.

	As an alternative to passing a complete array of data to the view helper function, 

	you may use the with method to add individual pieces of data to the view:

		return view('greeting')->with('name', 'Victoria');







